//flags are 32px x 32px

class ForceDirctedGraphContainer extends React.Component {
  constructor(props){
    super(props);
    this.state = {countryData: {}};
  }
  
  componentDidMount(){
   let url =  "https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json";
   d3.json(url , (json) => {
         this.setState({countryData: json})
    });
  }
  render(){
    return <ForceDirctedGraph countryData={this.state.countryData}/>;
  }
}

class ForceDirctedGraph extends React.Component {
  
  componentDidUpdate(){
    let margin = {
      top: 20,
      bottom: 20,
      left: 20,
      right: 20
    };
    
    let width = 1000, height = 900;
        // width = w - margin.left - margin.right,
        // height = h - margin.top - margin.bottom;
     let flagContainer = d3.select("#container")
                  .append("div")
                  .attr("id","flag-container");
    
    let svg = d3.select("#container")
              .append("svg")
              .attr("width", width)
              .attr("height", height)
              .attr("id", "graph");
    
   // let color = d3.scaleOrdinal(d3.schemeCategory20b);
    
    if(this.props.countryData.nodes){
      let nodes = this.props.countryData.nodes;
      let links = this.props.countryData.links;
      
let div = d3.select("body").append("div")	
    .attr("class", "tooltip")				
    .style("opacity", 0);
      
    let simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id((d,i) => i).distance(50))
        .force("charge", d3.forceManyBody().strength(-100))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("y", d3.forceY(0))
        .force("x", d3.forceX(0));
      
          let node = flagContainer.selectAll('.flag')
                .data(nodes)
                .enter()
                    .append('div')
                    .attr("class", d => `flag flag-${d.code}`) 
                    .on("mouseover", (d) => {		
                        div.transition()		
                        .duration(200)		
                        .style("opacity", .9);		
                        div.html(d.country)	
                        .style("left", (d3.event.pageX + 5) + "px")		
                        .style("top", (d3.event.pageY + 5) + "px");	
                      })					
                      .on("mouseout", (d) => {		
                          div.transition()		
                              .duration(500)		
                              .style("opacity", 0);	
                      })
                           .call(d3.drag()
                           .on("start", dragstarted)
                           .on("drag", dragged)
                           .on("end", dragended));
      
      let link = svg.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(links)
                .enter()
                  .append("line")
                  .attr("stroke-width", 1);
      
      let blockWidth = 24, blockHeight = 24;

      simulation
        .nodes(nodes)
        .on("tick", ticked);
      
      simulation.force("link")
        .links(links);
      
      //svg.call(tip);
      
      function ticked(){
        link
          .attr("x1", (d) => d.source.x)
          .attr("y1", (d) => d.source.y)
          .attr("x2", (d) => d.target.x)
          .attr("y2", (d) => d.target.y);
        node
          .style("left", function(d) {
              return (d.x - (blockWidth/2)) + 'px';
            })
            .style("top", function(d) {
              return (d.y - (blockWidth/2)) + 'px';
            });
          
        // .attr('transform', function(d) { return "translate ("+(d.x - (blockWidth/2))+","+(d.y - (blockWidth/2))+")"; });
        
          
      };
      
      function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
      }

      function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
      }

      function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
      }
    }
  }
  
  render(){
    return (
      <div>
        <h1>Force-Directed Graph of State Contiguity</h1>
        <div id="container"/>
      </div>);
  }
}

ReactDOM.render(<ForceDirctedGraphContainer />, document.querySelector("#root"));